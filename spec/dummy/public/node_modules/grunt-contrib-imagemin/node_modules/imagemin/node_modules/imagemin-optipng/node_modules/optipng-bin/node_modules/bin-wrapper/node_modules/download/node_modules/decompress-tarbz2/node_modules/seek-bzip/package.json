{
  "name": "seek-bzip",
  "version": "1.0.4",
  "author": {
    "name": "Eli Skeggs, C. Scott Ananian, Kevin Kwok"
  },
  "description": "a pure-JavaScript Node.JS module for random-access decoding bzip2 data",
  "main": "./seek-bzip/index.js",
  "repository": {
    "type": "git",
    "url": "https://github.com/cscott/seek-bzip.git"
  },
  "license": "LGPL 2.1",
  "bin": {
    "seek-bunzip": "./bin/seek-bunzip",
    "seek-table": "./bin/seek-bzip-table"
  },
  "directories": {
    "test": "test"
  },
  "dependencies": {
    "commander": "~2.4.0"
  },
  "devDependencies": {
    "fibers": "~1.0.1",
    "mocha": "~2.0.1"
  },
  "scripts": {
    "test": "mocha"
  },
  "readme": "# seek-bzip\n\n[![Build Status][1]][2] [![dependency status][3]][4] [![dev dependency status][5]][6]\n\n`seek-bzip` is a pure-javascript Node.JS module adapted from [node-bzip](https://github.com/skeggse/node-bzip) and before that [antimatter15's pure-javascript bzip2 decoder](https://github.com/antimatter15/bzip2.js).  Like these projects, `seek-bzip` only does decompression (see [compressjs](https://github.com/cscott/compressjs) if you need compression code).  Unlike those other projects, `seek-bzip` can seek to and decode single blocks from the bzip2 file.\n\n`seek-bzip` primarily decodes buffers into other buffers, synchronously.\nWith the help of the [fibers](https://github.com/laverdet/node-fibers)\npackage, it can operate on node streams; see `test/stream.js` for an\nexample.\n\n## How to Install\n\n```\nnpm install seek-bzip\n```\n\nThis package uses\n[Typed Arrays](https://developer.mozilla.org/en-US/docs/JavaScript/Typed_arrays), which are present in node.js >= 0.5.5.\n\n## Usage\n\nAfter compressing some example data into `example.bz2`, the following will recreate that original data and save it to `example`:\n\n```\nvar Bunzip = require('seek-bzip');\nvar fs = require('fs');\n\nvar compressedData = fs.readFileSync('example.bz2');\nvar data = Bunzip.decode(compressedData);\n\nfs.writeFileSync('example', data);\n```\n\nSee the tests in the `tests/` directory for further usage examples.\n\nFor uncompressing single blocks of bzip2-compressed data, you will need\nan out-of-band index listing the start of each bzip2 block.  (Presumably\nyou generate this at the same time as you index the start of the information\nyou wish to seek to inside the compressed file.)  The `seek-bzip` module\nhas been designed to be compatible with the C implementation `seek-bzip2`\navailable from https://bitbucket.org/james_taylor/seek-bzip2.  That codebase\ncontains a `bzip-table` tool which will generate bzip2 block start indices.\nThere is also a pure-JavaScript `seek-bzip-table` tool in this package's\n`bin` directory.\n\n## Documentation\n\n`require('seek-bzip')` returns a `Bunzip` object.  It contains three static\nmethods.  The first is a function accepting one or two parameters:\n\n`Bunzip.decode = function(input, [Number expectedSize] or [output], [boolean multistream])`\n\nThe `input` argument can be a \"stream\" object (which must implement the\n`readByte` method), or a `Buffer`.\n\nIf `expectedSize` is not present, `decodeBzip` simply decodes `input` and\nreturns the resulting `Buffer`.\n\nIf `expectedSize` is present (and numeric), `decodeBzip` will store\nthe results in a `Buffer` of length `expectedSize`, and throw an error\nin the case that the size of the decoded data does not match\n`expectedSize`.\n\nIf you pass a non-numeric second parameter, it can either be a `Buffer`\nobject (which must be of the correct length; an error will be thrown if\nthe size of the decoded data does not match the buffer length) or\na \"stream\" object (which must implement a `writeByte` method).\n\nThe optional third `multistream` parameter, if true, attempts to continue\nreading past the end of the bzip2 file.  This supports \"multistream\"\nbzip2 files, which are simply multiple bzip2 files concatenated together.\nIf this argument is true, the input stream must have an `eof` method\nwhich returns true when the end of the input has been reached.\n\nThe second exported method is a function accepting two or three parameters:\n\n`Bunzip.decodeBlock = function(input, Number blockStartBits, [Number expectedSize] or [output])`\n\nThe `input` and `expectedSize`/`output` parameters are as above.\nThe `blockStartBits` parameter gives the start of the desired block, in bits.\n\nIf passing a stream as the `input` parameter, it must implement the\n`seek` method.\n\nThe final exported method is a function accepting two or three parameters:\n\n`Bunzip.table = function(input, Function callback, [boolean multistream])`\n\nThe `input` and `multistream` parameters are identical to those for the\n`decode` method.\n\nThis function will invoke `callback(position, size)` once per bzip2 block,\nwhere `position` gives the starting position of the block (in *bits*), and\n`size` gives the uncompressed size of the block (in bytes).\n\nThis can be used to construct an index allowing direct access to a particular\nblock inside a bzip2 file, using the `decodeBlock` method.\n\n## Command-line\nThere are binaries available in bin.  The first generates an index of all\nthe blocks in a bzip2-compressed file:\n```\n$ bin/seek-bzip-table test/sample4.bz2\n32\t99981\n320555\t99981\n606348\t99981\n847568\t99981\n1089094\t99981\n1343625\t99981\n1596228\t99981\n1843336\t99981\n2090919\t99981\n2342106\t39019\n$\n```\nThe first field is the starting position of the block, in bits, and the\nsecond field is the length of the block, in bytes.\n\nThe second binary decodes an arbitrary block of a bzip2 file:\n```\n$ bin/seek-bunzip -d -b 2342106 test/sample4.bz2 | tail\nélan's\némigré\némigré's\némigrés\népée\népée's\népées\nétude\nétude's\nétudes\n$\n```\n\nUse `--help` to see other options.\n\n## Help wanted\n\nImprovements to this module would be generally useful.\nFeel free to fork on github and submit pull requests!\n\n## Related projects\n\n* https://github.com/skeggse/node-bzip node-bzip (original upstream source)\n* https://github.com/cscott/compressjs\n  Lots of compression/decompression algorithms from the same author as this\n  module, including bzip2 compression code.\n* https://github.com/cscott/lzjb fast LZJB compression/decompression\n\n## License\n\n#### LGPL 2.1 License\n\n> Copyright &copy; 2013 C. Scott Ananian\n>\n> Copyright &copy; 2012 Eli Skeggs\n>\n> Copyright &copy; 2011 Kevin Kwok\n>\n> This library is free software; you can redistribute it and/or\n> modify it under the terms of the GNU Lesser General Public\n> License as published by the Free Software Foundation; either\n> version 2.1 of the License, or (at your option) any later version.\n>\n> This library is distributed in the hope that it will be useful,\n> but WITHOUT ANY WARRANTY; without even the implied warranty of\n> MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n> Lesser General Public License for more details.\n>\n> You should have received a copy of the GNU Lesser General Public\n> License along with this library; if not, see\n> http://www.gnu.org/licenses/lgpl-2.1.html\n\n[1]: https://travis-ci.org/cscott/seek-bzip.png\n[2]: https://travis-ci.org/cscott/seek-bzip\n[3]: https://david-dm.org/cscott/seek-bzip.png\n[4]: https://david-dm.org/cscott/seek-bzip\n[5]: https://david-dm.org/cscott/seek-bzip/dev-status.png\n[6]: https://david-dm.org/cscott/seek-bzip#info=devDependencies\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/cscott/seek-bzip/issues"
  },
  "homepage": "https://github.com/cscott/seek-bzip",
  "_id": "seek-bzip@1.0.4",
  "_shasum": "19370df05ff1c87b62d4f80c0792106c39cf5380",
  "_from": "seek-bzip@^1.0.3",
  "_resolved": "https://registry.npmjs.org/seek-bzip/-/seek-bzip-1.0.4.tgz"
}
