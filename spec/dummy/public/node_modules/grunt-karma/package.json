{
  "name": "grunt-karma",
  "version": "0.10.1",
  "description": "grunt plugin for karma test runner",
  "main": "tasks/grunt-karma.js",
  "repository": {
    "type": "git",
    "url": "https://github.com/karma-runner/grunt-karma.git"
  },
  "keywords": [
    "gruntplugin",
    "karma",
    "grunt",
    "test",
    "unit",
    "runner",
    "TDD"
  ],
  "scripts": {
    "test": "grunt test"
  },
  "author": {
    "name": "Dave Geddes"
  },
  "license": "MIT",
  "readmeFilename": "README.md",
  "dependencies": {
    "lodash": "~2.4.1"
  },
  "devDependencies": {
    "coffee-script": "~1.8.0",
    "expect.js": "^0.3.1",
    "grunt": "~0.4.3",
    "grunt-auto-release": "0.0.6",
    "grunt-bump": "0.0.16",
    "grunt-contrib-jshint": "~0.10.0",
    "grunt-contrib-watch": "~0.2.0",
    "grunt-conventional-changelog": "~0.0.12",
    "grunt-jscs-checker": "~0.6.1",
    "grunt-npm": "0.0.2",
    "karma": "~0.12.0",
    "karma-chrome-launcher": "~0.1.2",
    "karma-firefox-launcher": "~0.1.3",
    "karma-mocha": "~0.1.3"
  },
  "peerDependencies": {
    "grunt": "0.4.x",
    "karma": "~0.12.0"
  },
  "contributors": [
    {
      "name": "dignifiedquire",
      "email": "friedel.ziegelmayer@gmail.com"
    },
    {
      "name": "Michał Gołębiowski",
      "email": "m.goleb@gmail.com"
    },
    {
      "name": "dsuckau",
      "email": "denis.suckau@concepts-and-training.de"
    },
    {
      "name": "Christian Reed",
      "email": "christian@rgbfab.com"
    },
    {
      "name": "Daniel Herman",
      "email": "daniel.c.herman@gmail.com"
    },
    {
      "name": "Eddie Monge",
      "email": "eddie@eddiemonge.com"
    },
    {
      "name": "James Ford",
      "email": "jford@psyked.co.uk"
    },
    {
      "name": "Jonas Pommerening",
      "email": "jonas.pommerening@gmail.com"
    },
    {
      "name": "Matt Dean",
      "email": "matt@trabian.com"
    },
    {
      "name": "Max Riveiro",
      "email": "kavu13@gmail.com"
    },
    {
      "name": "Olivier Amblet",
      "email": "olivier@amblet.net"
    },
    {
      "name": "Pascal Precht",
      "email": "pascal.precht@googlemail.com"
    },
    {
      "name": "Roman Morozov",
      "email": "romo@ciklum.com"
    },
    {
      "name": "Sahat Yalkabov",
      "email": "sakhat@gmail.com"
    },
    {
      "name": "Vojta Jina",
      "email": "vojta.jina@gmail.com"
    },
    {
      "name": "facboy",
      "email": "facboy@gmail.com"
    },
    {
      "name": "jiverson",
      "email": "jiverson222@gmail.com"
    },
    {
      "name": "joshrtay",
      "email": "joshrtay@gmail.com"
    },
    {
      "name": "kolesnik",
      "email": "andrii_kolesnyk@epam.com"
    },
    {
      "name": "Alexander Slansky",
      "email": "alexander@slansky.net"
    },
    {
      "name": "m7r",
      "email": "martin@figuro-theater.de"
    },
    {
      "name": "Alexey Kucherenko",
      "email": "alexei.kucherenko@gmail.com"
    },
    {
      "name": "Chris Gross",
      "email": "cgross@texeltek.com"
    },
    {
      "name": "Chris Wren",
      "email": "cthewren@gmail.com"
    }
  ],
  "readme": "# grunt-karma [![Build Status](https://travis-ci.org/karma-runner/grunt-karma.svg?branch=master)](https://travis-ci.org/karma-runner/grunt-karma) [![Dependency Status](https://david-dm.org/karma-runner/grunt-karma.svg)](https://david-dm.org/karma-runner/grunt-karma) [![devDependency Status](https://david-dm.org/karma-runner/grunt-karma/dev-status.svg)](https://david-dm.org/karma-runner/grunt-karma#info=devDependencies)\n\n\n> Grunt plugin for [Karma](https://github.com/karma-runner/karma)\n\nThis current version uses `karma@0.12.x`. For using older versions see the\nold releases of grunt-karma.\n\n## Getting Started\nFrom the same directory as your project's Gruntfile and package.json, install\nthis plugin with the following command:\n\n```bash\n$ npm install grunt-karma --save-dev\n```\n\nOnce that's done, add this line to your project's Gruntfile:\n\n```js\ngrunt.loadNpmTasks('grunt-karma');\n```\n\n## Config\nInside your `Gruntfile.js` file, add a section named `karma`, containing\nany number of configurations for running karma. You can either put your\nconfig in a [karma config file] or leave it all in your Gruntfile (recommended).\n\n### Here's an example that points to the config file:\n\n```js\nkarma: {\n  unit: {\n    configFile: 'karma.conf.js'\n  }\n}\n```\n\n### Here's an example that puts the config in the Gruntfile:\n\n```js\nkarma: {\n  unit: {\n    options: {\n      files: ['test/**/*.js']\n    }\n  }\n}\n```\n\nYou can override any of the config file's settings by putting them\ndirectly in the Gruntfile:\n\n```js\nkarma: {\n  unit: {\n    configFile: 'karma.conf.js',\n    runnerPort: 9999,\n    singleRun: true,\n    browsers: ['PhantomJS'],\n    logLevel: 'ERROR'\n  }\n}\n```\n\nTo change the `logLevel` in the grunt config file instead of the karma config, use one of the following strings:\n`OFF`, `ERROR`, `WARN`, `INFO`, `DEBUG`\n\nThe `files` option can be extended \"per-target\" in the typical way\nGrunt handles [files][grunt-config-files]:\n\n```js\nkarma: {\n  options: {\n    files: ['lib/**/*.js']\n  },\n  unit: {\n    files: [\n      { src: ['test/**/*.js'] }\n    ]\n  }\n}\n```\n\nWhen using the \"Grunt way\" of specifying files, you can also extend the\nfile objects with the options [supported by karma][karma-config-files]:\n\n```js\nkarma: {\n  unit: {\n    files: [\n      { src: ['test/**/*.js'], served: true },\n      { src: ['lib/**/*.js'], served: true, included: false }\n    ]\n  }\n}\n```\n\n### Config with Grunt Template Strings in `files`\n\nWhen using template strings in the `files` option, the results will flattened. Therefore, if you include a variable that includes an array, the array will be flattened before being passed to Karma.\n\nExample:\n\n```js\nmeta: {\n  jsFiles: ['jquery.js','angular.js']\n},\nkarma: {\n  options: {\n    files: ['<%= meta.jsFiles %>','angular-mocks.js','**/*-spec.js']\n  }\n}\n```\n\n## Sharing Configs\nIf you have multiple targets, it may be helpful to share common\nconfiguration settings between them. Grunt-karma supports this by\nusing the `options` property:\n\n```js\nkarma: {\n  options: {\n    configFile: 'karma.conf.js',\n    runnerPort: 9999,\n    browsers: ['Chrome', 'Firefox']\n  },\n  continuous: {\n    singleRun: true,\n    browsers: ['PhantomJS']\n  },\n  dev: {\n    reporters: 'dots'\n  }\n}\n```\n\nIn this example the `continuous` and `dev` targets will both use\nthe `configFile` and `runnerPort` specified in the `options`. But\nthe `continuous` target will override the browser setting to use\nPhantomJS, and also run as a singleRun. The `dev` target will simply\nchange the reporter to dots.\n\n## Running tests\nThere are three ways to run your tests with karma:\n\n### Karma Server with Auto Runs on File Change\nSetting the `autoWatch` option to true will instruct karma to start\na server and watch for changes to files, running tests automatically:\n\n```js\nkarma: {\n  unit: {\n    configFile: 'karma.conf.js',\n    autoWatch: true\n  }\n}\n```\nNow run `$ grunt karma`\n\n### Karma Server with Grunt Watch\nMany Grunt projects watch several types of files using [grunt-contrib-watch].\nConfig karma like usual (without the autoWatch option), and add\n`background:true`:\n\n```js\nkarma: {\n  unit: {\n    configFile: 'karma.conf.js',\n    background: true,\n    singleRun: false\n  }\n}\n```\nThe `background` option will tell grunt to run karma in a child process\nso it doesn't block subsequent grunt tasks.\n\nThe `singleRun: false` option will tell grunt to keep the karma server up\nafter a test run.\n\nConfig your `watch` task to run the karma task with the `:run` flag. For example:\n\n```js\nwatch: {\n  //run unit tests with karma (server needs to be already running)\n  karma: {\n    files: ['app/js/**/*.js', 'test/browser/**/*.js'],\n    tasks: ['karma:unit:run'] //NOTE the :run flag\n  }\n},\n```\n\nIn your terminal window run `$ grunt karma:unit:start watch`, which starts the\nkarma server and the watch task. Now when grunt watch detects a change to\none of your watched files, it will run the tests specified in the `unit`\ntarget using the already running karma server. This is the preferred method\nfor development.\n\n### Single Run\nKeeping a browser window & karma server running during development is\nproductive, but not a good solution for build processes. For that reason karma\nprovides a \"continuous integration\" mode, which will launch the specified\nbrowser(s), run the tests, and close the browser(s). It also supports running\ntests in [PhantomJS], a headless webkit browser which is great for running tests as part of a build. To run tests in continous integration mode just add the `singleRun` option:\n\n```js\nkarma: {\n  unit: {\n    configFile: 'config/karma.conf.js',\n  },\n  //continuous integration mode: run tests once in PhantomJS browser.\n  continuous: {\n    configFile: 'config/karma.conf.js',\n    singleRun: true,\n    browsers: ['PhantomJS']\n  },\n}\n```\n\nThe build would then run `grunt karma:continuous` to start PhantomJS,\nrun tests, and close PhantomJS.\n\n## Using additional client.args\nYou can pass arbitrary `client.args` through the commandline like this:\n\n```bash\n$ grunt karma:dev watch --grep=mypattern\n```\n\n\n## License\nMIT License\n\n[karma-config-file]: http://karma-runner.github.com/0.12/config/configuration-file.html\n[karma-config-files]: http://karma-runner.github.io/0.12/config/files.html\n[grunt-config-files]: http://gruntjs.com/configuring-tasks#files\n[grunt-contrib-watch]: https://github.com/gruntjs/grunt-contrib-watch\n[PhantomJS]: http://phantomjs.org/\n[karma-mocha]: https://github.com/karma-runner/karma-mocha\n",
  "bugs": {
    "url": "https://github.com/karma-runner/grunt-karma/issues"
  },
  "homepage": "https://github.com/karma-runner/grunt-karma",
  "_id": "grunt-karma@0.10.1",
  "_shasum": "255fae402bb04409cf95c6ac77e8c1968934924b",
  "_from": "grunt-karma@^0.10.1",
  "_resolved": "https://registry.npmjs.org/grunt-karma/-/grunt-karma-0.10.1.tgz"
}
