{
  "name": "anymatch",
  "version": "1.1.0",
  "description": "Matches strings against configurable strings, globs, regular expressions, and/or functions",
  "main": "index.js",
  "files": [
    "index.js"
  ],
  "author": {
    "name": "Elan Shanker",
    "url": "http://github.com/es128"
  },
  "license": "ISC",
  "homepage": "https://github.com/es128/anymatch",
  "repository": {
    "type": "git",
    "url": "https://github.com/es128/anymatch"
  },
  "bugs": {
    "url": "https://github.com/es128/anymatch/issues"
  },
  "keywords": [
    "match",
    "any",
    "string",
    "file",
    "fs",
    "list",
    "glob",
    "regex",
    "regexp",
    "regular",
    "expression",
    "function"
  ],
  "scripts": {
    "test": "istanbul cover _mocha && cat ./coverage/lcov.info | coveralls"
  },
  "dependencies": {
    "minimatch": "~1.0.0"
  },
  "devDependencies": {
    "coveralls": "~2.11.2",
    "istanbul": "~0.3.2",
    "mocha": "~1.21.4"
  },
  "readme": "anymatch [![Build Status](https://travis-ci.org/es128/anymatch.svg)](https://travis-ci.org/es128/anymatch) [![Coverage Status](https://img.shields.io/coveralls/es128/anymatch.svg)](https://coveralls.io/r/es128/anymatch?branch=master)\n======\nJavascript module to match a string against a regular expression, glob, string,\nor function that takes the string as an argument and returns a truthy or falsy\nvalue. The matcher can also be an array of any or all of these. Useful for\nallowing a very flexible user-defined config to define things like file paths.\n\n[![NPM](https://nodei.co/npm/anymatch.png?downloads=true&downloadRank=true&stars=true)](https://nodei.co/npm/anymatch/)\n[![NPM](https://nodei.co/npm-dl/anymatch.png?height=3&months=9)](https://nodei.co/npm-dl/anymatch/)\n\nUsage\n-----\n```sh\nnpm install anymatch --save\n```\n\n#### anymatch (matchers, testString, [returnIndex], [startIndex], [endIndex])\n* __matchers__: (_Array|String|RegExp|Function_)\nString to be directly matched, string with glob patterns, regular expression\ntest, function that takes the testString as an argument and returns a truthy\nvalue if it should be matched, or an array of any number and mix of these types.\n* __testString__: (_String|Array_) The string to test against the matchers. If\npassed as an array, the first element of the array will be used as the\n`testString` for non-function matchers, while the entire array will be applied\nas the arguments for function matchers.\n* __returnIndex__: (_Boolean [optional]_) If true, return the array index of\nthe first matcher that that testString matched, or -1 if no match, instead of a\nboolean result.\n* __startIndex, endIndex__: (_Integer [optional]_) Can be used to define a\nsubset out of the array of provided matchers to test against. Can be useful\nwith bound matcher functions (see below). When used with `returnIndex = true`\npreserves original indexing. Behaves the same as `Array.prototype.slice` (i.e.\nincludes array members up to, but not including endIndex).\n\n```js\nvar anymatch = require('anymatch');\n\nvar matchers = [\n\t'path/to/file.js',\n\t'path/anyjs/**/*.js',\n\t/foo.js$/,\n\tfunction (string) {\n\t\treturn string.indexOf('bar') !== -1 && string.length > 10\n\t}\n];\n\nanymatch(matchers, 'path/to/file.js'); // true\nanymatch(matchers, 'path/anyjs/baz.js'); // true\nanymatch(matchers, 'path/to/foo.js'); // true\nanymatch(matchers, 'path/to/bar.js'); // true\nanymatch(matchers, 'bar.js'); // false\n\n// returnIndex = true\nanymatch(matchers, 'foo.js', true); // 2\nanymatch(matchers, 'path/anyjs/foo.js', true); // 1\n\n// skip matchers\nanymatch(matchers, 'path/to/file.js', false, 1); // false\nanymatch(matchers, 'path/anyjs/foo.js', true, 2, 3); // 2\nanymatch(matchers, 'path/to/bar.js', true, 0, 3); // -1\n```\n\n#### anymatch (matchers)\nYou can also pass in only your matcher(s) to get a curried function that has\nalready been bound to the provided matching criteria. This can be used as an\n`Array.prototype.filter` callback.\n\n```js\nvar matcher = anymatch(matchers);\n\nmatcher('path/to/file.js'); // true\nmatcher('path/anyjs/baz.js', true); // 1\nmatcher('path/anyjs/baz.js', true, 2); // -1\n\n['foo.js', 'bar.js'].filter(matcher); // ['foo.js']\n```\n\nChange Log\n----------\n[See release notes page on GitHub](https://github.com/es128/anymatch/releases)\n\nLicense\n-------\n[ISC](https://raw.github.com/es128/anymatch/master/LICENSE)\n",
  "readmeFilename": "README.md",
  "_id": "anymatch@1.1.0",
  "_shasum": "ebc63275cee368a96b300f31623bf9f228d428e3",
  "_from": "anymatch@^1.1.0",
  "_resolved": "https://registry.npmjs.org/anymatch/-/anymatch-1.1.0.tgz"
}
