{
  "name": "chokidar",
  "description": "A neat wrapper around node.js fs.watch / fs.watchFile / fsevents.",
  "version": "1.0.0-rc3",
  "keywords": [
    "fs",
    "watch",
    "watchFile",
    "watcher",
    "watching",
    "file",
    "fsevents"
  ],
  "homepage": "https://github.com/paulmillr/chokidar",
  "author": {
    "name": "Paul Miller",
    "url": "http://paulmillr.com"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/paulmillr/chokidar.git"
  },
  "bugs": {
    "url": "http://github.com/paulmillr/chokidar/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "http://github.com/paulmillr/chokidar/raw/master/README.md"
    }
  ],
  "scripts": {
    "test": "istanbul test node_modules/mocha/bin/_mocha",
    "ci-test": "istanbul cover _mocha && cat ./coverage/lcov.info | coveralls"
  },
  "main": "lib",
  "files": [
    "lib/"
  ],
  "devDependencies": {
    "chai": "^1.9.2",
    "coveralls": "^2.11.2",
    "istanbul": "^0.3.5",
    "mocha": "^2.0.0",
    "sinon": "^1.10.3",
    "sinon-chai": "^2.6.0"
  },
  "optionalDependencies": {
    "fsevents": "^0.3.1"
  },
  "dependencies": {
    "anymatch": "^1.1.0",
    "async-each": "^0.1.5",
    "glob-parent": "^1.0.0",
    "is-binary-path": "^1.0.0",
    "readdirp": "^1.3.0",
    "fsevents": "^0.3.1"
  },
  "readme": "# Chokidar [![Mac/Linux Build Status](https://travis-ci.org/paulmillr/chokidar.svg?branch=master)](https://travis-ci.org/paulmillr/chokidar) [![Windows Build status](https://ci.appveyor.com/api/projects/status/jvv568xm6xsow034/branch/master?svg=true)](https://ci.appveyor.com/project/es128/chokidar/branch/master) [![Coverage Status](https://coveralls.io/repos/paulmillr/chokidar/badge.svg)](https://coveralls.io/r/paulmillr/chokidar)\nA neat wrapper around node.js fs.watch / fs.watchFile / fsevents.\n\n[![NPM](https://nodei.co/npm-dl/chokidar.png)](https://nodei.co/npm/chokidar/)\n[![NPM](https://nodei.co/npm/chokidar.png?downloads=true&downloadRank=true&stars=true)](https://nodei.co/npm/chokidar/)\n\n#### [See what's new in v1.0](https://github.com/paulmillr/chokidar/blob/master/CHANGELOG.md#chokidar-100-rc1-21-january-2015)\n\n## Why?\nNode.js `fs.watch`:\n\n* Doesn't report filenames on OS X.\n* Doesn't report events at all when using editors like Sublime on OS X.\n* Often reports events twice.\n* Emits most changes as `rename`.\n* Has [a lot of other issues](https://github.com/joyent/node/search?q=fs.watch&type=Issues)\n* Does not provide an easy way to recursively watch file trees.\n\nNode.js `fs.watchFile`:\n\n* Almost as bad at event handling.\n* Also does not provide any recursive watching.\n* Results in high CPU utilization.\n\nOther node.js watching libraries:\n\n* Are not using ultra-fast non-polling fsevents watcher implementation on OS X\n\nChokidar resolves these problems.\n\nIt is used in\n[brunch](http://brunch.io),\n[karma](http://karma-runner.github.io),\n[PM2](https://github.com/Unitech/PM2),\n[socketstream](http://www.socketstream.org),\n[derby](http://derbyjs.com/),\n[watchify](https://github.com/substack/watchify),\nand [many others](https://www.npmjs.org/browse/depended/chokidar/).\nIt has proven itself in production environments.\n\n## Getting started\nInstall chokidar via node.js package manager:\n\n    npm install chokidar\n\nThen just require the package in your code:\n\n```javascript\nvar chokidar = require('chokidar');\n\nvar watcher = chokidar.watch('file, dir, or glob', {\n  ignored: /[\\/\\\\]\\./, persistent: true\n});\n\nvar log = console.log.bind(console);\n\nwatcher\n  .on('add', function(path) { log('File', path, 'has been added'); })\n  .on('addDir', function(path) { log('Directory', path, 'has been added'); })\n  .on('change', function(path) { log('File', path, 'has been changed'); })\n  .on('unlink', function(path) { log('File', path, 'has been removed'); })\n  .on('unlinkDir', function(path) { log('Directory', path, 'has been removed'); })\n  .on('error', function(error) { log('Error happened', error); })\n  .on('ready', function() { log('Initial scan complete. Ready for changes.'); })\n  .on('raw', function(event, path, details) { log('Raw event info:', event, path, details); })\n\n// 'add', 'addDir' and 'change' events also receive stat() results as second\n// argument when available: http://nodejs.org/api/fs.html#fs_class_fs_stats\nwatcher.on('change', function(path, stats) {\n  if (stats) console.log('File', path, 'changed size to', stats.size);\n});\n\n// Watch new files.\nwatcher.add('new-file');\nwatcher.add(['new-file-2', 'new-file-3', '**/other-file*']);\n\n// Un-watch some files.\nwatcher.unwatch('new-file*');\n\n// Only needed if watching is `persistent: true`.\nwatcher.close();\n\n// One-liner\nrequire('chokidar').watch('.', {ignored: /[\\/\\\\]\\./}).on('all', function(event, path) {\n  console.log(event, path);\n});\n\n```\n\n## API\n\n`chokidar.watch(paths, options)` â€” takes one or more paths (which may be paths to files,\n  dirs to be watched recursively, or glob patterns) and options:\n\n#### Persistence\n\n* `persistent` (default: `true`). Indicates whether the process\nshould continue to run as long as files are being watched. If set to\n`false` when using `fsevents` to watch, no more events will be emitted\nafter `ready`, even if the process continues to run.\n\n#### Path filtering\n\n* `ignored` ([anymatch](https://github.com/es128/anymatch)-compatible definition)\nDefines files/paths to be ignored. The **whole path** is tested, not just\nfilename. If a function with two arguments is provided, it gets called\ntwice per path - once with a single argument (the path), second time with\ntwo arguments (the path and the [`fs.Stats`](http://nodejs.org/api/fs.html#fs_class_fs_stats)\nobject of that path).\n* `ignoreInitial` (default: `false`). Indicates whether chokidar\nshould ignore the initial `add` events or not.\n* `followSymlinks` (default: `true`). When `false`, only the\nsymlinks themselves will be watched for changes instead of following\nthe link references and bubbling events through the link's path.\n* `cwd` (no default). The base directory from which watch `paths` are to be\nderived. Paths emitted with events will be relative to this.\n\n#### Performance\n\n* `interval` (default: `100`). Interval of file system polling.\n* `binaryInterval` (default: `300`). Interval of file system\npolling for binary files (see extensions in src/is-binary).\n* `usePolling` (default: `false`).\nWhether to use fs.watchFile (backed by polling), or fs.watch. If polling\nleads to high CPU utilization, consider setting this to `false`. Polling\nmay be necessary to successfully watch files in certain situation, such as\nnetwork mounted drives. Setting to `true` explicitly on OS X overrides the\n`useFsEvents` default.\n* `useFsEvents` (default: `true` on OS X). Whether to use the\n`fsevents` watching interface if available. When set to `true` explicitly\nand `fsevents` is available this supercedes the `usePolling` setting. When\nset to `false` on OS X, `usePolling: true` becomes the default.\n* `alwaysStat` (default: `false`). If relying upon the\n[`fs.Stats`](http://nodejs.org/api/fs.html#fs_class_fs_stats)\nobject that may get passed with `add`, `addDir`, and `change` events, set\nthis to `true` to ensure it is provided even in cases where it wasn't\nalready available from the underlying watch events.\n* `depth` (default: `undefined`). If set, limits how many levels of\nsubdirectories will be traversed.\n\n#### Errors\n* `ignorePermissionErrors` (default: `false`). Indicates\nwhether to watch files that don't have read permissions.\n* `atomic` (default: `true` if `useFsEvents` and `usePolling` are `false`).\nAutomatically filters out artifacts that occur when using editors that use\n\"atomic writes\" instead of writing directly to the source file.\n\n### Methods & Events\n\n`chokidar.watch()` produces an instance of `FSWatcher`. Methods of `FSWatcher`:\n\n* `.add(path / paths)`: Add files, directories, or glob patterns for tracking.\nTakes an array of strings or just one string.\n* `.on(event, callback)`: Listen for an FS event.\nAvailable events: `add`, `addDir`, `change`, `unlink`, `unlinkDir`, `ready`, `raw`, `error`.\nAdditionally `all` is available which gets emitted with the underlying event name\nand path for every event other than `ready`, `raw`, and `error`.\n* `.unwatch(path / paths)`: Stop watching files, directories, or glob patterns.\nTakes an array of strings or just one string.\n* `.close()`: Removes all listeners from watched files.\n\n## License\nThe MIT license.\n\nCopyright (c) 2012 - 2015 Paul Miller (http://paulmillr.com) & Elan Shanker\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\nof the Software, and to permit persons to whom the Software is furnished to do\nso, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n",
  "readmeFilename": "README.md",
  "_id": "chokidar@1.0.0-rc3",
  "_shasum": "f95d5e60c7d66eb53136c8999c47e9d4f37118f5",
  "_from": "chokidar@>=0.8.2",
  "_resolved": "https://registry.npmjs.org/chokidar/-/chokidar-1.0.0-rc3.tgz"
}
