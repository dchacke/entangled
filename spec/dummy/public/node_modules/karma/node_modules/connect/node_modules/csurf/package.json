{
  "name": "csurf",
  "description": "CSRF token middleware",
  "version": "1.6.6",
  "author": {
    "name": "Jonathan Ong",
    "email": "me@jongleberry.com",
    "url": "http://jongleberry.com"
  },
  "contributors": [
    {
      "name": "Douglas Christopher Wilson",
      "email": "doug@somethingdoug.com"
    }
  ],
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "git://github.com/expressjs/csurf"
  },
  "dependencies": {
    "cookie": "0.1.2",
    "cookie-signature": "1.0.5",
    "csrf": "~2.0.5",
    "http-errors": "~1.2.8"
  },
  "devDependencies": {
    "body-parser": "~1.11.0",
    "connect": "3",
    "cookie-parser": "~1.3.3",
    "cookie-session": "~1.1.0",
    "istanbul": "0.3.5",
    "mocha": "~2.1.0",
    "supertest": "~0.15.0"
  },
  "engines": {
    "node": ">= 0.8.0"
  },
  "scripts": {
    "test": "mocha --check-leaks --reporter spec --bail test/",
    "test-cov": "istanbul cover node_modules/mocha/bin/_mocha -- --check-leaks --reporter dot test/",
    "test-travis": "istanbul cover node_modules/mocha/bin/_mocha --report lcovonly -- --check-leaks --reporter spec test/"
  },
  "files": [
    "HISTORY.md",
    "LICENSE",
    "index.js"
  ],
  "keywords": [
    "csrf",
    "tokens",
    "middleware",
    "express"
  ],
  "readme": "# csurf\n\n[![NPM Version][npm-image]][npm-url]\n[![NPM Downloads][downloads-image]][downloads-url]\n[![Build status][travis-image]][travis-url]\n[![Test coverage][coveralls-image]][coveralls-url]\n\nNode.js [CSRF](https://en.wikipedia.org/wiki/Cross-site_request_forgery) protection middleware.\n\nRequires either a session middleware or [cookie-parser](https://www.npmjs.com/package/cookie-parser) to be initialized first.\n- [express-session](https://www.npmjs.com/package/express-session)\n- [cookie-session](https://www.npmjs.com/package/cookie-session)\n\nIf you have questions on how this module is implemented, please read\n[Understanding CSRF](https://github.com/pillarjs/understanding-csrf).\n\n### Install\n\n```sh\n$ npm install csurf\n```\n\n## API\n\n```js\nvar csrf = require('csurf')\n```\n\n### csrf(options)\n\nThis middleware adds a `req.csrfToken()` function to make a token which should be added to requests which mutate state, within a hidden form field, query-string etc. This token is validated against the visitor's session or csrf cookie.\n\n#### Options\n\n- `value` a function accepting the request, returning the token.\n  - The default function checks four possible token locations:\n    - `_csrf` parameter in `req.body` generated by the `body-parser` middleware.\n    - `_csrf` parameter in `req.query` generated by `query()`.\n    - `x-csrf-token` and `x-xsrf-token` header fields.\n- `cookie` set to a truthy value to enable cookie-based instead of session-based csrf secret storage.\n  - If `cookie` is an object, these options can be configured, otherwise defaults are used:\n    - `key` the name of the cookie to use (defaults to `_csrf`) to store the csrf secret\n    - any other [res.cookie](http://expressjs.com/4x/api.html#res.cookie) options can be set\n- `ignoreMethods` An array of the methods CSRF token checking will disabled.\n  (default: `['GET', 'HEAD', 'OPTIONS']`)\n\n### req.csrfToken()\n\nLazy-loads the token associated with the request.\n\n## Example\n\n### Simple express example\n\nThe following is an example of some server-side code that protects all\nnon-GET/HEAD/OPTIONS routes with a CSRF token.\n\n```js\nvar express = require('express')\nvar csrf    = require('csurf')\n\nvar app = express()\napp.use(csrf())\n\n// error handler\napp.use(function (err, req, res, next) {\n  if (err.code !== 'EBADCSRFTOKEN') return next(err)\n\n  // handle CSRF token errors here\n  res.status(403)\n  res.send('session has expired or form tampered with')\n})\n\n// pass the csrfToken to the view\napp.get('/form', function(req, res) {\n  res.render('send', { csrfToken: req.csrfToken() })\n})\n```\n\nInside the view (depending on your template language; handlebars-style\nis demonstrated here), set the `csrfToken` value as the value of a hidden\ninput field named `_csrf`:\n\n```html\n<form action=\"/process\" method=\"POST\">\n  <input type=\"hidden\" name=\"_csrf\" value=\"{{csrfToken}}\">\n  \n  Favorite color: <input type=\"text\" name=\"favoriteColor\">\n  <button type=\"submit\">Submit</button>\n</form>\n```\n\n### Custom error handling\n\n```js\nvar express = require('express')\nvar csrf    = require('csurf')\n\nvar app = express()\napp.use(csrf())\n\n// error handler\napp.use(function (err, req, res, next) {\n  if (err.code !== 'EBADCSRFTOKEN') return next(err)\n\n  // handle CSRF token errors here\n  res.status(403)\n  res.send('session has expired or form tampered with')\n})\n```\n\n## License\n\n[MIT](LICENSE)\n\n[npm-image]: https://img.shields.io/npm/v/csurf.svg?style=flat\n[npm-url]: https://npmjs.org/package/csurf\n[travis-image]: https://img.shields.io/travis/expressjs/csurf.svg?style=flat\n[travis-url]: https://travis-ci.org/expressjs/csurf\n[coveralls-image]: https://img.shields.io/coveralls/expressjs/csurf.svg?style=flat\n[coveralls-url]: https://coveralls.io/r/expressjs/csurf?branch=master\n[downloads-image]: https://img.shields.io/npm/dm/csurf.svg?style=flat\n[downloads-url]: https://npmjs.org/package/csurf\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/expressjs/csurf/issues"
  },
  "homepage": "https://github.com/expressjs/csurf",
  "_id": "csurf@1.6.6",
  "_shasum": "fc4b1aa293f65da87731c049350d01b25bda3ece",
  "_from": "csurf@~1.6.2",
  "_resolved": "https://registry.npmjs.org/csurf/-/csurf-1.6.6.tgz"
}
