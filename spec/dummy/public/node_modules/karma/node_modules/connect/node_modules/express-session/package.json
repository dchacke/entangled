{
  "name": "express-session",
  "version": "1.8.2",
  "description": "Simple session middleware for Express",
  "author": {
    "name": "TJ Holowaychuk",
    "email": "tj@vision-media.ca",
    "url": "http://tjholowaychuk.com"
  },
  "contributors": [
    {
      "name": "Douglas Christopher Wilson",
      "email": "doug@somethingdoug.com"
    },
    {
      "name": "Joe Wagner",
      "email": "njwjs722@gmail.com"
    }
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/expressjs/session"
  },
  "license": "MIT",
  "dependencies": {
    "cookie": "0.1.2",
    "cookie-signature": "1.0.5",
    "crc": "3.0.0",
    "debug": "~2.0.0",
    "depd": "0.4.5",
    "on-headers": "~1.0.0",
    "parseurl": "~1.3.0",
    "uid-safe": "1.0.1",
    "utils-merge": "1.0.0"
  },
  "devDependencies": {
    "after": "0.8.1",
    "cookie-parser": "~1.3.3",
    "istanbul": "0.3.2",
    "express": "~4.8.8",
    "mocha": "~1.21.4",
    "should": "~4.0.4",
    "supertest": "~0.13.0"
  },
  "files": [
    "session/",
    "HISTORY.md",
    "LICENSE",
    "index.js"
  ],
  "engines": {
    "node": ">= 0.8.0"
  },
  "scripts": {
    "test": "mocha --bail --reporter spec test/",
    "test-cov": "istanbul cover node_modules/mocha/bin/_mocha -- --reporter dot test/",
    "test-travis": "istanbul cover node_modules/mocha/bin/_mocha --report lcovonly -- --reporter spec test/"
  },
  "readme": "# express-session\n\n[![NPM Version][npm-image]][npm-url]\n[![NPM Downloads][downloads-image]][downloads-url]\n[![Build Status][travis-image]][travis-url]\n[![Test Coverage][coveralls-image]][coveralls-url]\n[![Gratipay][gratipay-image]][gratipay-url]\n\n## Installation\n\n```bash\n$ npm install express-session\n```\n\n## API\n\n```js\nvar express = require('express')\nvar session = require('express-session')\n\nvar app = express()\n\napp.use(session({secret: 'keyboard cat'}))\n```\n\n\n### session(options)\n\nSetup session store with the given `options`.\n\nSession data is _not_ saved in the cookie itself, just the session ID.\n\n#### Options\n\n  - `name` - cookie name (formerly known as `key`). (default: `'connect.sid'`)\n  - `store` - session store instance.\n  - `secret` - session cookie is signed with this secret to prevent tampering.\n  - `cookie` - session cookie settings.\n    - (default: `{ path: '/', httpOnly: true, secure: false, maxAge: null }`)\n  - `genid` - function to call to generate a new session ID. (default: uses `uid2` library)\n  - `rolling` - forces a cookie set on every response. This resets the expiration date. (default: `false`)\n  - `resave` - forces session to be saved even when unmodified. (default: `true`)\n  - `proxy` - trust the reverse proxy when setting secure cookies (via \"x-forwarded-proto\" header). When set to `true`, the \"x-forwarded-proto\" header will be used. When set to `false`, all headers are ignored. When left unset, will use the \"trust proxy\" setting from express. (default: `undefined`)\n  - `saveUninitialized` - forces a session that is \"uninitialized\" to be saved to the store. A session is uninitialized when it is new but not modified. This is useful for implementing login sessions, reducing server storage usage, or complying with laws that require permission before setting a cookie. (default: `true`)\n  - `unset` - controls result of unsetting `req.session` (through `delete`, setting to `null`, etc.). This can be \"keep\" to keep the session in the store but ignore modifications or \"destroy\" to destroy the stored session. (default: `'keep'`)\n\n#### options.genid\n\nGenerate a custom session ID for new sessions. Provide a function that returns a string that will be used as a session ID. The function is given `req` as the first argument if you want to use some value attached to `req` when generating the ID.\n\n**NOTE** be careful you generate unique IDs so your sessions do not conflict.\n\n```js\napp.use(session({\n  genid: function(req) {\n    return genuuid(); // use UUIDs for session IDs\n  },\n  secret: 'keyboard cat'\n}))\n```\n\n#### Cookie options\n\nPlease note that `secure: true` is a **recommended** option. However, it requires an https-enabled website, i.e., HTTPS is necessary for secure cookies.\nIf `secure` is set, and you access your site over HTTP, the cookie will not be set. If you have your node.js behind a proxy and are using `secure: true`, you need to set \"trust proxy\" in express:\n\n```js\nvar app = express()\napp.set('trust proxy', 1) // trust first proxy\napp.use(session({\n  secret: 'keyboard cat',\n  cookie: { secure: true }\n}))\n```\n\nFor using secure cookies in production, but allowing for testing in development, the following is an example of enabling this setup based on `NODE_ENV` in express:\n\n```js\nvar app = express()\nvar sess = {\n  secret: 'keyboard cat',\n  cookie: {}\n}\n\nif (app.get('env') === 'production') {\n  app.set('trust proxy', 1) // trust first proxy\n  sess.cookie.secure = true // serve secure cookies\n}\n\napp.use(session(sess))\n```\n\nBy default `cookie.maxAge` is `null`, meaning no \"expires\" parameter is set\nso the cookie becomes a browser-session cookie. When the user closes the\nbrowser the cookie (and session) will be removed.\n\n### req.session\n\nTo store or access session data, simply use the request property `req.session`,\nwhich is (generally) serialized as JSON by the store, so nested objects\nare typically fine. For example below is a user-specific view counter:\n\n```js\napp.use(session({ secret: 'keyboard cat', cookie: { maxAge: 60000 }}))\n\napp.use(function(req, res, next) {\n  var sess = req.session\n  if (sess.views) {\n    sess.views++\n    res.setHeader('Content-Type', 'text/html')\n    res.write('<p>views: ' + sess.views + '</p>')\n    res.write('<p>expires in: ' + (sess.cookie.maxAge / 1000) + 's</p>')\n    res.end()\n  } else {\n    sess.views = 1\n    res.end('welcome to the session demo. refresh!')\n  }\n})\n```\n\n#### Session.regenerate()\n\nTo regenerate the session simply invoke the method, once complete\na new SID and `Session` instance will be initialized at `req.session`.\n\n```js\nreq.session.regenerate(function(err) {\n  // will have a new session here\n})\n```\n\n#### Session.destroy()\n\nDestroys the session, removing `req.session`, will be re-generated next request.\n\n```js\nreq.session.destroy(function(err) {\n  // cannot access session here\n})\n```\n\n#### Session.reload()\n\nReloads the session data.\n\n```js\nreq.session.reload(function(err) {\n  // session updated\n})\n```\n\n#### Session.save()\n\n```js\nreq.session.save(function(err) {\n  // session saved\n})\n```\n\n#### Session.touch()\n\nUpdates the `.maxAge` property. Typically this is\nnot necessary to call, as the session middleware does this for you.\n\n### req.session.cookie\n\nEach session has a unique cookie object accompany it. This allows\nyou to alter the session cookie per visitor. For example we can\nset `req.session.cookie.expires` to `false` to enable the cookie\nto remain for only the duration of the user-agent.\n\n#### Cookie.maxAge\n\nAlternatively `req.session.cookie.maxAge` will return the time\nremaining in milliseconds, which we may also re-assign a new value\nto adjust the `.expires` property appropriately. The following\nare essentially equivalent\n\n```js\nvar hour = 3600000\nreq.session.cookie.expires = new Date(Date.now() + hour)\nreq.session.cookie.maxAge = hour\n```\n\nFor example when `maxAge` is set to `60000` (one minute), and 30 seconds\nhas elapsed it will return `30000` until the current request has completed,\nat which time `req.session.touch()` is called to reset `req.session.maxAge`\nto its original value.\n\n```js\nreq.session.cookie.maxAge // => 30000\n```\n\n## Session Store Implementation\n\nEvery session store _must_ implement the following methods\n\n   - `.get(sid, callback)`\n   - `.set(sid, session, callback)`\n   - `.destroy(sid, callback)`\n\nRecommended methods include, but are not limited to:\n\n   - `.length(callback)`\n   - `.clear(callback)`\n\nFor an example implementation view the [connect-redis](http://github.com/visionmedia/connect-redis) repo.\n\n## License\n\n[MIT](LICENSE)\n\n[npm-image]: https://img.shields.io/npm/v/express-session.svg?style=flat\n[npm-url]: https://npmjs.org/package/express-session\n[travis-image]: https://img.shields.io/travis/expressjs/session.svg?style=flat\n[travis-url]: https://travis-ci.org/expressjs/session\n[coveralls-image]: https://img.shields.io/coveralls/expressjs/session.svg?style=flat\n[coveralls-url]: https://coveralls.io/r/expressjs/session?branch=master\n[downloads-image]: https://img.shields.io/npm/dm/express-session.svg?style=flat\n[downloads-url]: https://npmjs.org/package/express-session\n[gratipay-image]: https://img.shields.io/gratipay/dougwilson.svg?style=flat\n[gratipay-url]: https://gratipay.com/dougwilson/\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/expressjs/session/issues"
  },
  "homepage": "https://github.com/expressjs/session",
  "_id": "express-session@1.8.2",
  "_shasum": "c4011e728a2349b3c18f117a5409908985e83483",
  "_from": "express-session@~1.8.2",
  "_resolved": "https://registry.npmjs.org/express-session/-/express-session-1.8.2.tgz"
}
