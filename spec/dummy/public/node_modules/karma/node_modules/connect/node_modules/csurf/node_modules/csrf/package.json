{
  "name": "csrf",
  "description": "primary logic behind csrf tokens",
  "version": "2.0.6",
  "author": {
    "name": "Jonathan Ong",
    "email": "me@jongleberry.com",
    "url": "http://jongleberry.com"
  },
  "contributors": [
    {
      "name": "Douglas Christopher Wilson",
      "email": "doug@somethingdoug.com"
    }
  ],
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "git://github.com/pillarjs/csrf"
  },
  "dependencies": {
    "base64-url": "1.2.1",
    "rndm": "~1.1.0",
    "scmp": "1.0.0",
    "uid-safe": "~1.1.0"
  },
  "devDependencies": {
    "bluebird": "~2.9.4",
    "istanbul": "0.3.5",
    "mocha": "~2.1.0"
  },
  "files": [
    "LICENSE",
    "HISTORY.md",
    "README.md",
    "index.js"
  ],
  "engines": {
    "node": ">= 0.8"
  },
  "scripts": {
    "test": "mocha --reporter spec",
    "test-cov": "istanbul cover node_modules/mocha/bin/_mocha -- --reporter dot",
    "test-travis": "istanbul cover node_modules/mocha/bin/_mocha --report lcovonly -- --reporter dot"
  },
  "keywords": [
    "csrf",
    "tokens"
  ],
  "readme": "# CSRF\n\n[![NPM Version][npm-image]][npm-url]\n[![NPM Downloads][downloads-image]][downloads-url]\n[![Node.js Version][node-image]][node-url]\n[![Build Status][travis-image]][travis-url]\n[![Test Coverage][coveralls-image]][coveralls-url]\n\nLogic behind CSRF token creation and verification.\nRead [Understanding-CSRF](https://github.com/pillarjs/understanding-csrf) for more information on CSRF.\nUse this module to create custom CSRF middleware and what not.\n\n### Install\n\n```bash\n$ npm install csrf\n```\n\n## API\n\n```js\nvar csrf = require('csrf')(options)\n\nvar secret = csrf.secretSync()\nvar token  = csrf.create(secret)\nvar valid  = csrf.verify(secret, token)\n```\n\n### Options\n\n- `secretLength: 24` - the byte length of the secret key\n- `saltLength: 8` - the string length of the salt\n- `tokensize: (secret, salt) => token` - a custom token creation function\n\n#### csrf.secret([cb])\n\nAsynchronously create a new `secret` of length `secretLength`.\nIf `cb` is not defined, a promise is returned.\nYou don't have to use this.\n\n```js\ncsrf.secret().then(function (secret) {\n\n})\n\ncsrf.secret(function (err, secret) {\n\n})\n```\n\n#### var secret = csrf.secretSync()\n\nSynchronous version of `csrf.secret()`\n\n#### var token = csrf.create(secret)\n\nCreate a CSRF token based on a `secret`.\nThis is the token you pass to clients.\n\n#### var valid = csrf.verify(secret, token)\n\nCheck whether a CSRF token is valid based on a `secret`.\nIf it's not valid, you should probably throw a `403` error.\n\n## License\n\n[MIT](LICENSE)\n\n[npm-image]: https://img.shields.io/npm/v/csrf.svg?style=flat\n[npm-url]: https://npmjs.org/package/csrf\n[node-image]: https://img.shields.io/node/v/csrf.svg?style=flat\n[node-url]: http://nodejs.org/download/\n[travis-image]: https://img.shields.io/travis/pillarjs/csrf.svg?style=flat\n[travis-url]: https://travis-ci.org/pillarjs/csrf\n[coveralls-image]: https://img.shields.io/coveralls/pillarjs/csrf.svg?style=flat\n[coveralls-url]: https://coveralls.io/r/pillarjs/csrf?branch=master\n[downloads-image]: https://img.shields.io/npm/dm/csrf.svg?style=flat\n[downloads-url]: https://npmjs.org/package/csrf\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/pillarjs/csrf/issues"
  },
  "homepage": "https://github.com/pillarjs/csrf",
  "_id": "csrf@2.0.6",
  "_shasum": "a90a9d88fc7411423cb0c5c13e901a8cc588132e",
  "_from": "csrf@~2.0.5",
  "_resolved": "https://registry.npmjs.org/csrf/-/csrf-2.0.6.tgz"
}
